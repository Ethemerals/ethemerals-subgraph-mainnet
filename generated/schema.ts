// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Core extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Core entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Core entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Core", id.toString(), this);
  }

  static load(id: string): Core | null {
    return store.get("Core", id) as Core | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get mintPrice(): BigInt {
    let value = this.get("mintPrice");
    return value.toBigInt();
  }

  set mintPrice(value: BigInt) {
    this.set("mintPrice", Value.fromBigInt(value));
  }

  get maxAvailableIndex(): BigInt | null {
    let value = this.get("maxAvailableIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxAvailableIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("maxAvailableIndex");
    } else {
      this.set("maxAvailableIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get ethemeralSupply(): BigInt | null {
    let value = this.get("ethemeralSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethemeralSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("ethemeralSupply");
    } else {
      this.set("ethemeralSupply", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Delegate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Delegate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Delegate", id.toString(), this);
  }

  static load(id: string): Delegate | null {
    return store.get("Delegate", id) as Delegate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (value === null) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Ethemeral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ethemeral entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ethemeral entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ethemeral", id.toString(), this);
  }

  static load(id: string): Ethemeral | null {
    return store.get("Ethemeral", id) as Ethemeral | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    return value.toBigInt();
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get atkBonus(): BigInt {
    let value = this.get("atkBonus");
    return value.toBigInt();
  }

  set atkBonus(value: BigInt) {
    this.set("atkBonus", Value.fromBigInt(value));
  }

  get defBonus(): BigInt {
    let value = this.get("defBonus");
    return value.toBigInt();
  }

  set defBonus(value: BigInt) {
    this.set("defBonus", Value.fromBigInt(value));
  }

  get spdBonus(): BigInt {
    let value = this.get("spdBonus");
    return value.toBigInt();
  }

  set spdBonus(value: BigInt) {
    this.set("spdBonus", Value.fromBigInt(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (value === null) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(value as BigInt));
    }
  }

  get bgId(): BigInt {
    let value = this.get("bgId");
    return value.toBigInt();
  }

  set bgId(value: BigInt) {
    this.set("bgId", Value.fromBigInt(value));
  }

  get petRedeemed(): boolean {
    let value = this.get("petRedeemed");
    return value.toBoolean();
  }

  set petRedeemed(value: boolean) {
    this.set("petRedeemed", Value.fromBoolean(value));
  }

  get scorecard(): string {
    let value = this.get("scorecard");
    return value.toString();
  }

  set scorecard(value: string) {
    this.set("scorecard", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (value === null) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Metadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Metadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Metadata", id.toString(), this);
  }

  static load(id: string): Metadata | null {
    return store.get("Metadata", id) as Metadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemerals(): Array<string> | null {
    let value = this.get("ethemerals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ethemerals(value: Array<string> | null) {
    if (value === null) {
      this.unset("ethemerals");
    } else {
      this.set("ethemerals", Value.fromStringArray(value as Array<string>));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get coin(): string {
    let value = this.get("coin");
    return value.toString();
  }

  set coin(value: string) {
    this.set("coin", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get mainClass(): string {
    let value = this.get("mainClass");
    return value.toString();
  }

  set mainClass(value: string) {
    this.set("mainClass", Value.fromString(value));
  }

  get subClass(): string {
    let value = this.get("subClass");
    return value.toString();
  }

  set subClass(value: string) {
    this.set("subClass", Value.fromString(value));
  }

  get special1(): i32 {
    let value = this.get("special1");
    return value.toI32();
  }

  set special1(value: i32) {
    this.set("special1", Value.fromI32(value));
  }

  get special2(): string {
    let value = this.get("special2");
    return value.toString();
  }

  set special2(value: string) {
    this.set("special2", Value.fromString(value));
  }

  get hair(): string {
    let value = this.get("hair");
    return value.toString();
  }

  set hair(value: string) {
    this.set("hair", Value.fromString(value));
  }

  get eyes(): string {
    let value = this.get("eyes");
    return value.toString();
  }

  set eyes(value: string) {
    this.set("eyes", Value.fromString(value));
  }

  get skin(): string {
    let value = this.get("skin");
    return value.toString();
  }

  set skin(value: string) {
    this.set("skin", Value.fromString(value));
  }

  get costume(): string {
    let value = this.get("costume");
    return value.toString();
  }

  set costume(value: string) {
    this.set("costume", Value.fromString(value));
  }
}

export class Scorecard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Scorecard entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Scorecard entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Scorecard", id.toString(), this);
  }

  static load(id: string): Scorecard | null {
    return store.get("Scorecard", id) as Scorecard | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get highestScore(): BigInt {
    let value = this.get("highestScore");
    return value.toBigInt();
  }

  set highestScore(value: BigInt) {
    this.set("highestScore", Value.fromBigInt(value));
  }

  get highestRewards(): BigInt {
    let value = this.get("highestRewards");
    return value.toBigInt();
  }

  set highestRewards(value: BigInt) {
    this.set("highestRewards", Value.fromBigInt(value));
  }

  get battles(): BigInt {
    let value = this.get("battles");
    return value.toBigInt();
  }

  set battles(value: BigInt) {
    this.set("battles", Value.fromBigInt(value));
  }

  get wins(): BigInt {
    let value = this.get("wins");
    return value.toBigInt();
  }

  set wins(value: BigInt) {
    this.set("wins", Value.fromBigInt(value));
  }

  get revived(): BigInt {
    let value = this.get("revived");
    return value.toBigInt();
  }

  set revived(value: BigInt) {
    this.set("revived", Value.fromBigInt(value));
  }

  get reviver(): BigInt {
    let value = this.get("reviver");
    return value.toBigInt();
  }

  set reviver(value: BigInt) {
    this.set("reviver", Value.fromBigInt(value));
  }

  get resurrected(): BigInt {
    let value = this.get("resurrected");
    return value.toBigInt();
  }

  set resurrected(value: BigInt) {
    this.set("resurrected", Value.fromBigInt(value));
  }

  get reaped(): BigInt {
    let value = this.get("reaped");
    return value.toBigInt();
  }

  set reaped(value: BigInt) {
    this.set("reaped", Value.fromBigInt(value));
  }

  get reaper(): BigInt {
    let value = this.get("reaper");
    return value.toBigInt();
  }

  set reaper(value: BigInt) {
    this.set("reaper", Value.fromBigInt(value));
  }

  get drained(): BigInt {
    let value = this.get("drained");
    return value.toBigInt();
  }

  set drained(value: BigInt) {
    this.set("drained", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get elfBalance(): BigInt {
    let value = this.get("elfBalance");
    return value.toBigInt();
  }

  set elfBalance(value: BigInt) {
    this.set("elfBalance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get allowDelegates(): boolean {
    let value = this.get("allowDelegates");
    return value.toBoolean();
  }

  set allowDelegates(value: boolean) {
    this.set("allowDelegates", Value.fromBoolean(value));
  }

  get ethemerals(): Array<string> | null {
    let value = this.get("ethemerals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ethemerals(value: Array<string> | null) {
    if (value === null) {
      this.unset("ethemerals");
    } else {
      this.set("ethemerals", Value.fromStringArray(value as Array<string>));
    }
  }

  get created(): Array<string> | null {
    let value = this.get("created");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set created(value: Array<string> | null) {
    if (value === null) {
      this.unset("created");
    } else {
      this.set("created", Value.fromStringArray(value as Array<string>));
    }
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (value === null) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdPets(): Array<string> | null {
    let value = this.get("createdPets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdPets(value: Array<string> | null) {
    if (value === null) {
      this.unset("createdPets");
    } else {
      this.set("createdPets", Value.fromStringArray(value as Array<string>));
    }
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (value === null) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdItems(): Array<string> | null {
    let value = this.get("createdItems");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdItems(value: Array<string> | null) {
    if (value === null) {
      this.unset("createdItems");
    } else {
      this.set("createdItems", Value.fromStringArray(value as Array<string>));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (value === null) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class CoreAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CoreAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CoreAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CoreAction", id.toString(), this);
  }

  static load(id: string): CoreAction | null {
    return store.get("CoreAction", id) as CoreAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class DelegateAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DelegateAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegateAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegateAction", id.toString(), this);
  }

  static load(id: string): DelegateAction | null {
    return store.get("DelegateAction", id) as DelegateAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegate(): string {
    let value = this.get("delegate");
    return value.toString();
  }

  set delegate(value: string) {
    this.set("delegate", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class EthemeralAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EthemeralAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EthemeralAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EthemeralAction", id.toString(), this);
  }

  static load(id: string): EthemeralAction | null {
    return store.get("EthemeralAction", id) as EthemeralAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get score(): BigInt | null {
    let value = this.get("score");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set score(value: BigInt | null) {
    if (value === null) {
      this.unset("score");
    } else {
      this.set("score", Value.fromBigInt(value as BigInt));
    }
  }

  get win(): boolean {
    let value = this.get("win");
    return value.toBoolean();
  }

  set win(value: boolean) {
    this.set("win", Value.fromBoolean(value));
  }

  get rewards(): BigInt | null {
    let value = this.get("rewards");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewards(value: BigInt | null) {
    if (value === null) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromBigInt(value as BigInt));
    }
  }

  get staked(): boolean {
    let value = this.get("staked");
    return value.toBoolean();
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get priceFeed(): BigInt | null {
    let value = this.get("priceFeed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceFeed(value: BigInt | null) {
    if (value === null) {
      this.unset("priceFeed");
    } else {
      this.set("priceFeed", Value.fromBigInt(value as BigInt));
    }
  }

  get long(): boolean {
    let value = this.get("long");
    return value.toBoolean();
  }

  set long(value: boolean) {
    this.set("long", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class AccountAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AccountAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccountAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccountAction", id.toString(), this);
  }

  static load(id: string): AccountAction | null {
    return store.get("AccountAction", id) as AccountAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get ethemeral(): string | null {
    let value = this.get("ethemeral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ethemeral(value: string | null) {
    if (value === null) {
      this.unset("ethemeral");
    } else {
      this.set("ethemeral", Value.fromString(value as string));
    }
  }

  get pet(): string | null {
    let value = this.get("pet");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pet(value: string | null) {
    if (value === null) {
      this.unset("pet");
    } else {
      this.set("pet", Value.fromString(value as string));
    }
  }

  get item(): string | null {
    let value = this.get("item");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (value === null) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Pet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pet", id.toString(), this);
  }

  static load(id: string): Pet | null {
    return store.get("Pet", id) as Pet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (value === null) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(value as BigInt));
    }
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get rarity(): BigInt {
    let value = this.get("rarity");
    return value.toBigInt();
  }

  set rarity(value: BigInt) {
    this.set("rarity", Value.fromBigInt(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class PetMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PetMetadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PetMetadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PetMetadata", id.toString(), this);
  }

  static load(id: string): PetMetadata | null {
    return store.get("PetMetadata", id) as PetMetadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (value === null) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(value as Array<string>));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class PetAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PetAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PetAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PetAction", id.toString(), this);
  }

  static load(id: string): PetAction | null {
    return store.get("PetAction", id) as PetAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pet(): string {
    let value = this.get("pet");
    return value.toString();
  }

  set pet(value: string) {
    this.set("pet", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Item entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Item entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Item", id.toString(), this);
  }

  static load(id: string): Item | null {
    return store.get("Item", id) as Item | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (value === null) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(value as BigInt));
    }
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get rarity(): BigInt {
    let value = this.get("rarity");
    return value.toBigInt();
  }

  set rarity(value: BigInt) {
    this.set("rarity", Value.fromBigInt(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class ItemMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ItemMetadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ItemMetadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ItemMetadata", id.toString(), this);
  }

  static load(id: string): ItemMetadata | null {
    return store.get("ItemMetadata", id) as ItemMetadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (value === null) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(value as Array<string>));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class ItemAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ItemAction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ItemAction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ItemAction", id.toString(), this);
  }

  static load(id: string): ItemAction | null {
    return store.get("ItemAction", id) as ItemAction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(value as Bytes));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get gasUsed(): i32 {
    let value = this.get("gasUsed");
    return value.toI32();
  }

  set gasUsed(value: i32) {
    this.set("gasUsed", Value.fromI32(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}
